<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo静态博客的搭建</title>
      <link href="/2023/07/22/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/07/22/hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>首先下载</p><p>git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>和node.js：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a>   （版本号要小一点，否则会不兼容，应在14以下，我所使用的版本是12.16.2）</p><p>之后将这两个进行安装，一直点下一步就行，不需要额外配置</p><p>安装完成之后，在cmd窗口分别输入</p><pre><code>node -v</code></pre><pre><code>nmp -v</code></pre><pre><code>git --version</code></pre><p>出现相应版本号即可</p><p>接着使用版本号注册github账号，选择免费账户即可，并且通过邮箱验证。之后右键在显示更多选项里面找到&#x3D;&#x3D;git bash here&#x3D;&#x3D;，进行用户名和邮箱的设置</p><pre><code>git config --global user.name &quot;github用户名&quot;</code></pre><pre><code>git config --global user.email &quot;github邮箱&quot;</code></pre><p>然后&#x3D;&#x3D;创建ssh密钥&#x3D;&#x3D;</p><p>输入</p><pre><code>ssh-keygen -t rsa -C &quot;github邮箱&quot;</code></pre><p>然后一直点回车</p><p>之后进入C:\用户\用户名\ .ssh目录\，然后勾选显示隐藏的文件，之后用记事本打开公钥id_rsa.pub文件，复制里面的内容，然后登录github进入setting页面，选择左侧的&#x3D;&#x3D;SSH and GPG keys&#x3D;&#x3D;，点击New SSH key。</p><p>title随便取一个喜欢的名字，之后将复制的公钥粘贴到key中，点击Add SSH key完成添加。</p><p>然后打开git bash here 输入</p><pre><code>ssh -T git@github.com</code></pre><p>出现Are you sure….输入yes回车确认。显示Hi xxx! You’re successfuly…即为连接成功。</p><p>接着&#x3D;&#x3D;创建github pages仓库&#x3D;&#x3D;，在github右上角的加号里面找到New repository.</p><p>在Repository name中输入用户名.github.io (不用管前面的用户名，在输入框内要输入用户名.github.io)</p><p>勾选Initialize this repository with a README</p><p>填好之后点击Create repository 创建，创建之后默认启用https，博客地址为http:&#x2F;&#x2F;用户名.github.io</p><h4 id="本地安装hexo博客程序"><a href="#本地安装hexo博客程序" class="headerlink" title="本地安装hexo博客程序"></a>本地安装hexo博客程序</h4><p>创建一个文件夹来存放hexo的程序文件，打开这个文件夹，右键找到git bash here </p><p>然后输入</p><pre><code>npm install -g hexo-cli</code></pre><p>若是mac用户则需要管理员权限，来运行这条命令</p><pre><code>sudo npm install -g hexo-cli</code></pre><p>安装时间教程，耐心等待即可</p><p>接着进行hexo的初始化和本地预览</p><pre><code>hexo init#初始化</code></pre><pre><code>npm install#安装组件</code></pre><p>完成后依次输入下列的命令，在本地进行预览</p><pre><code>hexo g#生成页面</code></pre><pre><code>hexo s#启动预览</code></pre><p>接着访问&#x3D;&#x3D;<a href="https://localhost:4000==即可">https://localhost:4000==即可</a></p><p>注意若是页面加载不出来，可能是端口被占用了，ctrl+c关闭进程，然后运行</p><pre><code>hexo server -p 5000</code></pre><p>切换端口即可</p><p>接着我们需要将hexo部署到github pages，这样可以是我们能够联网访问。</p><p>首先安装hexo-deployer-git</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>然后修改——config.yml 文件末尾的Deployment部分</p><pre><code>deploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: main</code></pre><p>修改完成之后，运行hexo d 将网站部署到github pages。这时我们访问</p><pre><code>https://用户名.github.io</code></pre><p>即可看到hexo网站。</p><p>当我们使用的时候，进入git bash here 创建博文</p><pre><code>hexo new &quot;标题&quot;</code></pre><h4 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a>文章发布</h4><p>接着进入source文件夹就可以发现我们刚刚创建的一个文件。之后我们就可以通过Markdown编辑器在这个文件中撰写文章了。写完博文之后运行命令将文章部署到github pages上完成发布。</p><pre><code>hexo g#生成页面</code></pre><pre><code>hexo s#部署发布</code></pre><p>当想要使用分类和标签的时候先在主题配置文件进行设置</p><p><img src="https://img-1317758194.cos.ap-nanjing.myqcloud.com/typoraimage-20230722201813332.png" alt="image-20230722201813332"></p><p>接着新建一个分类页面</p><pre><code>hexo new page categories</code></pre><p>标签页面同理</p><pre><code>hexo new page tags</code></pre><p>修改index.php</p><p>打开 <code>categories</code> 文件夹下的 <code>index.md</code> ，在最下面一行加一行文字就行了。</p><p><img src="https://img-1317758194.cos.ap-nanjing.myqcloud.com/typoraimage-20230722202009486.png" alt="image-20230722202009486"></p><p>在发布的时候添加文章分类标签的时候应当以如下格式进行修改</p><p><img src="https://img-1317758194.cos.ap-nanjing.myqcloud.com/typoraimage-20230722202114592.png" alt="image-20230722202114592"></p><blockquote><p>需要注意杂谈前面的空格</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker的使用</title>
      <link href="/2023/07/22/docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/07/22/docker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>前几天一直在搞docker，中间状况不断，写点东西记录一下。</p><p>首先对于docker我的理解就是一个小的虚拟机。它可以很方便的通过提前准备好的镜像实现快速部署，打包起来也很方便，而且不同的docker容器运行期间也不会相互影响。</p><p>我本来是想通过用docker搭建hexo博客之后挂载到白嫖的阿里云服务器来实现博客的搭建，同时也能系统的学习一下docker的使用，和加深对docker的理解。</p><p>本来我的计划是在ubuntu里面搭建的docker，之后把hexo博客的种种文件塞进docker里面以此来实现博客的搭建，但是经过一两天的努力，我发现在docker里面从无到有一点点搭建很难，总是状况百出。后来选择用dockerfile搭建，并且主阵地也转移到了阿里云服务器，先是使用下面的命令搭建一个hexo镜像，通过dockerfile搭建镜像的好处就是比较快捷而且相对来说不容易出一些错误。</p><h4 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h4><pre><code>mkdir -p /root/data/hexo-debugcd /root/date/hexo-debugvim Dockerfile</code></pre><pre><code>FROM node:14maintainer lc# 构建参数ARG WORK_PATH=&quot;/hexo&quot;# 设置时区RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &#39;Asia/Shanghai&#39; &gt;/etc/timezone# 替换为阿里源并安装必要工具RUN sed -i &#39;s/deb.debian.org/mirrors.aliyun.com/g&#39; /etc/apt/sources.list  \    &amp;&amp; apt update -y \    &amp;&amp; apt-get install -y curl vim telnet# 解决vim中文乱码、ll命令RUN echo &quot;syntax on \nset termencoding=utf-8 \nset encoding=utf8 \nset fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030&quot; &gt;&gt; ~/.vimrc  \ &amp;&amp; echo &quot;alias ll=&#39;ls $LS_OPTIONS -l&#39;&quot; &gt;&gt; ~/.bashrc# 安装hexoRUN npm install hexo-cli -g#设置工作目录WORKDIR $WORK_PATH# 继承基础镜像ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]CMD [ &quot;node&quot; ]</code></pre><p>制作镜像</p><pre><code>docker build -t hexo-debug:node14 .</code></pre><blockquote><p>需要注意的一个点是那个node14后面的点，一定不能少！！！，这都是我的血泪史！！</p></blockquote><p>查看已经有的镜像</p><pre><code>docker images</code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><pre><code>docker run -dit  -p 4000:4000 --name hexo-debug hexo-debug:node14</code></pre><blockquote><p>这个命令用于在Docker中运行一个基于镜像 “hexo-debug:node14” 的容器，以分离模式(<code>-d</code>)和伪终端(<code>-t</code>)附加方式运行。容器将被命名为 “hexo-debug”，使用 <code>--name</code> 参数指定。它还将通过 <code>-p</code> 参数将主机的 4000 端口映射到容器内部的 4000 端口。</p></blockquote><p>进入容器</p><pre><code>docker ps -a   #查看所有容器详情</code></pre><pre><code>docker ps      #查看正在运行的容器详情</code></pre><p><img src="https://img-1317758194.cos.ap-nanjing.myqcloud.com/typoraimage-20230722175528490.png" alt="image-20230722175528490"></p><pre><code>docker exec -it hexo-debug /bin/bash        #这里可以用hexo-debug也可以用543cfb5f53dd</code></pre><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4><p>接着初始化hexo</p><pre><code># 初始化命令，blog为文件夹名hexo init blog# 进入文件夹cd blog# 删除.github文件夹rm -rf .github# 安装npm install# 启动本地服务器hexo s -g </code></pre><p>顺利运行之后，就可以通过访问服务器的公网ip加端口号进行访问了。</p><h4 id="上传拉取镜像"><a href="#上传拉取镜像" class="headerlink" title="上传拉取镜像"></a>上传拉取镜像</h4><p>用docker搭建东西无非就是图一个可以随去随用，那这一点体现在哪里呢，很简单，既然我们可以将镜像启动为容器，那么我们自然可以将我们搭建好环境的容器打包为镜像上传到自己的私有仓库，当自己需要的时候随取随用。</p><p>接着就说一下该怎么将自己的搭建好的容器打包为镜像并且上传</p><p>先使用命令查询一下容器的情况</p><pre><code>docker ps      #docker ps -a也可以</code></pre><p>接着将需要打包的容器停下来</p><pre><code>docker stop hexo-debug     #这里可以用hexo-debug也可以用543cfb5f53dd</code></pre><p>接着进行打包</p><pre><code>docker commit 587d9c2ca2a1 hexo-debug:1234</code></pre><blockquote><p>前面是需要打包的容器的id,后面是给镜像起的名字,冒号后面的是标签</p></blockquote><p>我这里使用的是阿里云的镜像仓库</p><p>具体的镜像仓库怎么获取就不多说了,这里只讲解怎么怎么用</p><p><img src="https://img-1317758194.cos.ap-nanjing.myqcloud.com/typoraimage-20230722181331049.png" alt="image-20230722181331049"></p><p>阿里云这边其实已经给了怎么用,这里这里只做一些简单的使用讲解和注意点</p><p>这些命令中的镜像版本号可以使用标签填写</p><pre><code>docker push registry.cn-beijing.aliyuncs.com/f1sh/hexo-blog:1234</code></pre><p>其他的命令就不多介绍了.</p><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p>至此就实现了docker镜像了上传和拉取,用之前搭建好镜像制作容器,容器启动后里面的环境都是先前搭配好的可以直接用.</p><p>这里再介绍一个用于定义和运行多个Docker容器的工具docker-compose,</p><p>这个工具的版本要稍微新一点,旧版的会报错</p><pre><code>sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</code></pre><pre><code>sudo chmod +x /usr/local/bin/docker-compose    #为其添加权限</code></pre><p>大致介绍一下一些常用的命令</p><p>需要注意的一点,需要先进入存在dockerfile的文件夹再输入下面的命令</p><pre><code>docker-compose up -d      #启动容器</code></pre><blockquote><p>-d的作用简单来说就是让容器运行的日志放在后台,这样就不会影响后续命令的执行</p></blockquote><pre><code>docker-compose down       #停止容器</code></pre><h4 id="删除卸载"><a href="#删除卸载" class="headerlink" title="删除卸载"></a>删除卸载</h4><p>删除容器</p><pre><code>docker rm hexo-debug      #这里可以用hexo-debug也可以用543cfb5f53dd</code></pre><p>删除镜像</p><pre><code>docker rmi hexo-debug      #这里可以用hexo-debug也可以用543cfb5f53dd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/21/hello-world/"/>
      <url>/2023/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
